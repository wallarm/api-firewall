// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/platform/proxy/ws.go

// Package proxy is a generated GoMock package.
package proxy

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWebSocketConn is a mock of WebSocketConn interface.
type MockWebSocketConn struct {
	ctrl     *gomock.Controller
	recorder *MockWebSocketConnMockRecorder
}

// MockWebSocketConnMockRecorder is the mock recorder for MockWebSocketConn.
type MockWebSocketConnMockRecorder struct {
	mock *MockWebSocketConn
}

// NewMockWebSocketConn creates a new mock instance.
func NewMockWebSocketConn(ctrl *gomock.Controller) *MockWebSocketConn {
	mock := &MockWebSocketConn{ctrl: ctrl}
	mock.recorder = &MockWebSocketConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebSocketConn) EXPECT() *MockWebSocketConnMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockWebSocketConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockWebSocketConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWebSocketConn)(nil).Close))
}

// ReadMessage mocks base method.
func (m *MockWebSocketConn) ReadMessage() (int, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessage")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadMessage indicates an expected call of ReadMessage.
func (mr *MockWebSocketConnMockRecorder) ReadMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessage", reflect.TypeOf((*MockWebSocketConn)(nil).ReadMessage))
}

// SendCloseConnection mocks base method.
func (m *MockWebSocketConn) SendCloseConnection(closeType int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCloseConnection", closeType)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCloseConnection indicates an expected call of SendCloseConnection.
func (mr *MockWebSocketConnMockRecorder) SendCloseConnection(closeType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCloseConnection", reflect.TypeOf((*MockWebSocketConn)(nil).SendCloseConnection), closeType)
}

// SendComplete mocks base method.
func (m *MockWebSocketConn) SendComplete(messageType int, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendComplete", messageType, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendComplete indicates an expected call of SendComplete.
func (mr *MockWebSocketConnMockRecorder) SendComplete(messageType, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendComplete", reflect.TypeOf((*MockWebSocketConn)(nil).SendComplete), messageType, id)
}

// SendError mocks base method.
func (m *MockWebSocketConn) SendError(messageType int, msgID string, requestErrors error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendError", messageType, msgID, requestErrors)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendError indicates an expected call of SendError.
func (mr *MockWebSocketConnMockRecorder) SendError(messageType, msgID, requestErrors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendError", reflect.TypeOf((*MockWebSocketConn)(nil).SendError), messageType, msgID, requestErrors)
}

// WriteMessage mocks base method.
func (m *MockWebSocketConn) WriteMessage(messageType int, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMessage", messageType, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessage indicates an expected call of WriteMessage.
func (mr *MockWebSocketConnMockRecorder) WriteMessage(messageType, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessage", reflect.TypeOf((*MockWebSocketConn)(nil).WriteMessage), messageType, data)
}
