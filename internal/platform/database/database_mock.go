// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/platform/database/database.go

// Package database is a generated GoMock package.
package database

import (
	reflect "reflect"

	openapi3 "github.com/getkin/kin-openapi/openapi3"
	gomock "github.com/golang/mock/gomock"
)

// MockDBOpenAPILoader is a mock of DBOpenAPILoader interface.
type MockDBOpenAPILoader struct {
	ctrl     *gomock.Controller
	recorder *MockDBOpenAPILoaderMockRecorder
}

// MockDBOpenAPILoaderMockRecorder is the mock recorder for MockDBOpenAPILoader.
type MockDBOpenAPILoaderMockRecorder struct {
	mock *MockDBOpenAPILoader
}

// NewMockDBOpenAPILoader creates a new mock instance.
func NewMockDBOpenAPILoader(ctrl *gomock.Controller) *MockDBOpenAPILoader {
	mock := &MockDBOpenAPILoader{ctrl: ctrl}
	mock.recorder = &MockDBOpenAPILoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBOpenAPILoader) EXPECT() *MockDBOpenAPILoaderMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockDBOpenAPILoader) Load(dbStoragePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", dbStoragePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockDBOpenAPILoaderMockRecorder) Load(dbStoragePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockDBOpenAPILoader)(nil).Load), dbStoragePath)
}

// SchemaID mocks base method.
func (m *MockDBOpenAPILoader) SchemaID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SchemaID")
	ret0, _ := ret[0].(int)
	return ret0
}

// SchemaID indicates an expected call of SchemaID.
func (mr *MockDBOpenAPILoaderMockRecorder) SchemaID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SchemaID", reflect.TypeOf((*MockDBOpenAPILoader)(nil).SchemaID))
}

// Specification mocks base method.
func (m *MockDBOpenAPILoader) Specification() *openapi3.T {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Specification")
	ret0, _ := ret[0].(*openapi3.T)
	return ret0
}

// Specification indicates an expected call of Specification.
func (mr *MockDBOpenAPILoaderMockRecorder) Specification() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Specification", reflect.TypeOf((*MockDBOpenAPILoader)(nil).Specification))
}

// SpecificationRaw mocks base method.
func (m *MockDBOpenAPILoader) SpecificationRaw() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpecificationRaw")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// SpecificationRaw indicates an expected call of SpecificationRaw.
func (mr *MockDBOpenAPILoaderMockRecorder) SpecificationRaw() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpecificationRaw", reflect.TypeOf((*MockDBOpenAPILoader)(nil).SpecificationRaw))
}

// SpecificationVersion mocks base method.
func (m *MockDBOpenAPILoader) SpecificationVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpecificationVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// SpecificationVersion indicates an expected call of SpecificationVersion.
func (mr *MockDBOpenAPILoaderMockRecorder) SpecificationVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpecificationVersion", reflect.TypeOf((*MockDBOpenAPILoader)(nil).SpecificationVersion))
}
